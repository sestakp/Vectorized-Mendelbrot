Architektury Výpočetních Systémů (AVS 2022)
Projekt č. 2 (PMC)
Login: xsesta07

Úloha 1: Paralelizace původního řešení
===============================================================================

1) Kterou ze smyček (viz zadání) je vhodnější paralelizovat a co způsobuje 
   neefektivitu paralelizaci té druhé?
   
   Vhodnější je paralerizovat vnější smyčku v Margin cubes. Metoda evaluateFieldAt je volána mnohokrát a režije pro nastartování paralerní sekce není zanedbatelná.

2) Jaké plánování (rozdělení práce mezi vlákna) jste zvolili a proč? 
   Jaký vliv má velikost "chunk" při dynamickém plánování (8, 16, 32, 64)?

   Z měření mi nejhůře skončil static, následně dynamic. Nejlépe mi měření na drakovi dopadlo pro guided. Větší chunk size by měl mít nižší režiji pro rozdělování práce.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?
   
   Používám vektor vektorů a dynamicky podle počtu vláken vytvořím první dimenzi. Každé vlákno pak má svoje pole a není třeba řešit zamykání. Nakonci práce se jednotlivé vektory zkonkatenují do výsledného, což je možné jelikož k poli v průběhu běhu procedury nikdo nepřistupuje.

   

Úloha 2: Paralelní průchod stromem
===============================================================================

1) Stručně popište použití OpenMP tasků ve vašem řešení.

   Algoritmus Octree rekurzivně dělí prostor na 8 menších podprostorů, každé rekurzivní volání této funkce obhospodařuje jeden task. nakonci funkce se čeká na dokončení všech tasků, aby byl korektní celkový počet trojuhelníků.

2) Jaký vliv má na vaše řešení tzv. "cut-off"? Je vhodné vytvářet nový 
   task pro každou krychli na nejnižší úrovni?

   Aplikoval jsem OMP dovětek final, a postupným zkoušením jsem zůstal na čísle 4, nicméně výsledek se lišil na drakovi pouze o 100ms a neberu to jako razantní zrychlení. 
   Jinak i jako cutoff se může brát i zarážka rekurze, která také testuje velikost hrany a pak volá metodu BuildCube.

3) Jakým způsobem zajišťujete ukládání trojúhelníků z několika vláken současně?
   
   Využívám stejný přístup jako u Paralerizace původního řešení, tedy vektor vektorů.

Úloha 3: Grafy škálování všech řešení
===============================================================================

1) Stručně zhodnoťte efektivitu vytvořených řešení (na základě grafů škálování).

   Loop:
   Z grafu silného škálování je vidět, že s počtem přibývajících jader nám klesá čas potřebný pro vypočítání úlohy. Loop efektivněji využívá procesor a věřím, že s použitím vektoru vektorů pro trouhelníky tento trend pokračoval i pro více jader a větší vstupy.
   Tree:
   U Tree vidíme podobný trend jako u loop, nicméně hranice se začíná lámat na 32 jádrech, kdy se klesající trend pozastaví.

2) V jakém případě (v závislosti na počtu bodů ve vstupním souboru a velikosti 
   mřížky) bude vaše řešení 1. úlohy neefektivní? (pokud takový případ existuje)

   V případě, že bude velký počet bodů a málo pozic v mřížce (malé rozlišení), pak by si vlákna nemohli rozdělit pozice na mřížce (v případě, že by bylo méně pozic mřížky jak vláken), pak by se rychlost řešení začala blížit k referenčnímu.

3) Je (nebo není) stromový algoritmus efektivnější z pohledu slabého škálování 
   vzhledem ke vstupu?
   
   Stromový algoritmus není efektivnější z pohledu slabého škálování, jelikož v grafu s počtem jader stoupá, oproti například Loop, který je výrazně efektivnější.

4) Jaký je rozdíle mezi silným a slabým škálováním?

Oba grafy vykreslují závislost mezi dobou výpočtu a počtem jader.

Silné škálování nám popisuje jak se doba provádění snižuje, když přidáváme jádra (Amdahl). Ideální křívka je tedy lineárně klesající s přibývajícími jádry.

Slabé škálování nám popisuje, kolik práce zvládneme vykonat za nějaký pevně daný čas (například chceme ve hře držet 60FPS) (Gustafson). Ideální křivka je tedy konstantní s přibývajícími jádry (dvakrát více jader, ideálně implikuje dvakrát více udělané práce).


Úloha 4: Analýza využití jader pomocí VTune
================================================================================

1) Jaké bylo průměrné využití jader pro všechny tři implementace s omezením na 
   18 vláken? Na kolik procent byly využity?
   
   ref: 0.998 logical CPUs
   loop: 17.420 logical CPUs
   tree: 15.813 logical CPUs

2) Jaké bylo průměrné využití jader pro všechny tři implementace s využitím 
   všech jader? Na kolik procent se podařilo využít obě CPU?
   
   ref: 0.998 logical CPUs
   loop: 31.380 logical CPUs
   tree: 24.041 logical CPUs

3) Jaké jsou závěry z těchto měření?
  Z měření jsme došli k závěru, že loop implementace efektivněji pracuje s procesorem, nicméně tree implementace díky prořezávání prostoru dosahuje rychlejších výsledků i přes horší práci na procesoru.
